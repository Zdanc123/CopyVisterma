// <auto-generated />
using System;
using CopyVisterma;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CopyVisterma.Migrations
{
    [DbContext(typeof(Database))]
    partial class DatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CopyVisterma.Entities.BillingPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingId");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartingDate");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("BillingPeriods");

                    b.HasData(
                        new { Id = 1, BuildingId = 1, EndDate = new DateTime(2018, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), StartingDate = new DateTime(2018, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Type = 1 },
                        new { Id = 2, BuildingId = 1, EndDate = new DateTime(2018, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), StartingDate = new DateTime(2018, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Type = 1 },
                        new { Id = 3, BuildingId = 1, EndDate = new DateTime(2018, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), StartingDate = new DateTime(2018, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Type = 2 }
                    );
                });

            modelBuilder.Entity("CopyVisterma.Entities.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<string>("Comments");

                    b.Property<string>("Number");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Street");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Buildings");

                    b.HasData(
                        new { Id = 1, ClientId = 2, Comments = "Tylko nowa część budynku", Number = "1B", PostalCode = "16-400", Street = "Noniewicza" },
                        new { Id = 2, ClientId = 4, Number = "2", PostalCode = "16-400", Street = "Kościuszki" },
                        new { Id = 3, ClientId = 6, Number = "21", PostalCode = "16-400", Street = "Kościuszki" },
                        new { Id = 4, ClientId = 8, Number = "8A", PostalCode = "16-400", Street = "Dwernickiego" }
                    );
                });

            modelBuilder.Entity("CopyVisterma.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApartmentNumber");

                    b.Property<string>("BuildingNumber");

                    b.Property<string>("City");

                    b.Property<string>("Email");

                    b.Property<string>("NIP");

                    b.Property<string>("Name");

                    b.Property<string>("PersonGuardianId");

                    b.Property<string>("PersonHeatingId");

                    b.Property<string>("PersonWaterId");

                    b.Property<string>("Phone");

                    b.Property<string>("PostalCode");

                    b.Property<string>("REGON");

                    b.Property<string>("Street");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("PersonGuardianId");

                    b.HasIndex("PersonHeatingId");

                    b.HasIndex("PersonWaterId");

                    b.HasIndex("TypeId");

                    b.ToTable("Clients");

                    b.HasData(
                        new { Id = 1, ApartmentNumber = "2", BuildingNumber = "3", City = "Augustów", Email = "antypody@example.com", NIP = "2461974504", Name = "Antypody", Phone = "87 523 66 23", PostalCode = "06-408", REGON = "000482938", Street = "Turystyczna", TypeId = 1 },
                        new { Id = 2, BuildingNumber = "10", City = "Białystok", Email = "bsm@example.com", NIP = "8747154398", Name = "Białostocka Spółdzielnia Mieszkaniowa", Phone = "85 678 34 56", PostalCode = "15-268", REGON = "001822375", Street = "Transportowa", TypeId = 1 },
                        new { Id = 3, ApartmentNumber = "3", BuildingNumber = "13", City = "Suwałki", Email = "cs@example.com", NIP = "2615397366", Name = "Centrum Suwałki", Phone = "87 566 20 44", PostalCode = "16-400", REGON = "000029935", Street = "Wigierska", TypeId = 2 },
                        new { Id = 4, ApartmentNumber = "6", BuildingNumber = "8", City = "Sokółka", Email = "wzgorze@example.com", NIP = "2619836711", Name = "Dom na wzgórzu - Skółka", Phone = "85 437 23 99", PostalCode = "16-100", REGON = "00571963", Street = "Wesoła", TypeId = 2 },
                        new { Id = 5, BuildingNumber = "5b", City = "Gliwice", Email = "zakatek@example.com", NIP = "9085825691", Name = "Domowy zakątek Gliwice ", Phone = "32 782 98 02", PostalCode = "44-100", REGON = "001264861", Street = "Mickiewicza", TypeId = 2 },
                        new { Id = 6, ApartmentNumber = "13", BuildingNumber = "11", City = "Bydgoszcz", Email = "ecentrum@example.com", NIP = "7674301638", Name = "Enklawa Centrum", Phone = "52 892 63 55", PostalCode = "85-790", REGON = "000562815", Street = "Witosa", TypeId = 1 },
                        new { Id = 7, ApartmentNumber = "8", BuildingNumber = "1", City = "Bydgoszcz", Email = "epoludnie@example.com", NIP = "1670267291", Name = "Enklawa Poludnie", Phone = "52 871 75 21", PostalCode = "85-160", REGON = "001257361", Street = "Kowalskiego", TypeId = 2 },
                        new { Id = 8, ApartmentNumber = "2", BuildingNumber = "16", City = "Bydgoszcz", Email = "epolnoc@example.com", NIP = "5370081620", Name = "Enklawa Północ", Phone = "52 872 65 35", PostalCode = "85-792", REGON = "000071532", Street = "Andersa", TypeId = 1 },
                        new { Id = 9, ApartmentNumber = "4", BuildingNumber = "4", City = "Bydgoszcz", Email = "ewschod@example.com", NIP = "2267825615", Name = "Enklawa Wschód", Phone = "52 871 44 27", PostalCode = "85-623", REGON = "000265183", Street = "Tuwima", TypeId = 2 },
                        new { Id = 10, BuildingNumber = "11", City = "Bydgoszcz", Email = "ezachod@example.com", NIP = "3568256814", Name = "Enklawa Zachód", Phone = "52 872 76 90", PostalCode = "85-188", REGON = "000163429", Street = "Pogodna", TypeId = 2 },
                        new { Id = 11, ApartmentNumber = "7", BuildingNumber = "8", City = "Garwolin", Email = "gawrolin@example.com", NIP = "1553498624", Name = "Garwolin Centrum", Phone = "26 581 65 87", PostalCode = "08-400", REGON = "003520188", Street = "Gawędy", TypeId = 2 },
                        new { Id = 12, BuildingNumber = "2", City = "Warszawa", Email = "przedmiescie@example.com", NIP = "1342753273", Name = "Krakowskie przedmieście SM", Phone = "22 650 87 25", PostalCode = "05-075", REGON = "002514782", Street = "Krótka", TypeId = 2 },
                        new { Id = 13, BuildingNumber = "14", City = "Warszawa", Email = "mokotow@example.com", NIP = "6542985025", Name = "Mokotów", Phone = "22 672 46 28", PostalCode = "04-026", REGON = "000853815", Street = "Armii Krajowej", TypeId = 1 },
                        new { Id = 14, ApartmentNumber = "13", BuildingNumber = "12a", City = "Nałeczów", Email = "naleczow@example.com", NIP = "2568163957", Name = "Nałeczów", Phone = "41 763 88 52", PostalCode = "24-150", REGON = "002617825", Street = "Beskidzka", TypeId = 1 },
                        new { Id = 15, BuildingNumber = "5", City = "Olsztyn", Email = "olsztyn@example.com", NIP = "4557300202", Name = "Olsztyn Nowodwory", Phone = "89 541 99 58", PostalCode = "11-041", REGON = "000625183", Street = "Dolna", TypeId = 1 },
                        new { Id = 16, BuildingNumber = "16", City = "Płock", Email = "kamena@example.com", NIP = "1563802662", Name = "Płock Kamena", Phone = "24 452 65 24", PostalCode = "09-402", REGON = "000263816", Street = "Cisowa", TypeId = 2 },
                        new { Id = 17, ApartmentNumber = "4", BuildingNumber = "7", City = "Wroclaw", Email = "wroclawprzedmiescia@example.com", NIP = "3452865026", Name = "Przedmieścia Wrocław", Phone = "71 652 76 41", PostalCode = "56-300", REGON = "000125388", Street = "Działkowa", TypeId = 2 },
                        new { Id = 18, ApartmentNumber = "9", BuildingNumber = "6", City = "Bialystok", Email = "kolejowa@example.com", NIP = "2237169836", Name = "Rodzina Kolejowa", Phone = "85 352 76 34", PostalCode = "15-180", REGON = "000361937", Street = "Krzywa", TypeId = 1 },
                        new { Id = 19, BuildingNumber = "19", City = "Wroclaw", Email = "r.zakatek@example.com", NIP = "3433670130", Name = "Rodzinny zakątek", Phone = "71 351 76 27", PostalCode = "51-180", REGON = "002589269", Street = "Pomorska", TypeId = 1 },
                        new { Id = 20, ApartmentNumber = "9", BuildingNumber = "5", City = "Gdańsk", Email = "stogi@example.com", NIP = "9800265017", Name = "Stogi", Phone = "58 482 72 90", PostalCode = "80-299", REGON = "000251738", Street = "Mleczna", TypeId = 1 },
                        new { Id = 21, ApartmentNumber = "2", BuildingNumber = "6", City = "Szczecin", Email = "solihska@example.com", NIP = "2763971152", Name = "Solihska", Phone = "94 802 76 16", PostalCode = "70-512", REGON = "002614365", Street = "Lubelska", TypeId = 2 }
                    );
                });

            modelBuilder.Entity("CopyVisterma.Entities.ClientTechnician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<int>("ServiceTechnicianId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceTechnicianId");

                    b.ToTable("ClientTechnicians");
                });

            modelBuilder.Entity("CopyVisterma.Entities.ClientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ClientTypes");

                    b.HasData(
                        new { Id = 1, Name = "Spółdzielnia Mieszkaniowa" },
                        new { Id = 2, Name = "Wspólnota Mieszkaniowa" }
                    );
                });

            modelBuilder.Entity("CopyVisterma.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<string>("Comments");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("PhoneLandline");

                    b.Property<string>("PhoneMobile");

                    b.Property<string>("Position");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CopyVisterma.Entities.ServiceTechnician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName");

                    b.HasKey("Id");

                    b.ToTable("ServiceTechnicians");

                    b.HasData(
                        new { Id = 1, FullName = "Andrzej Nowak" },
                        new { Id = 2, FullName = "Jan Wasilewski" },
                        new { Id = 3, FullName = "Tomasz Żuk" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");
                });

            modelBuilder.Entity("CopyVisterma.Entities.BillingPeriod", b =>
                {
                    b.HasOne("CopyVisterma.Entities.Building", "Building")
                        .WithMany("BillingPeriods")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CopyVisterma.Entities.Building", b =>
                {
                    b.HasOne("CopyVisterma.Entities.Client", "Client")
                        .WithMany("Buildings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CopyVisterma.Entities.Client", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "PersonGuardian")
                        .WithMany()
                        .HasForeignKey("PersonGuardianId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "PersonHeating")
                        .WithMany()
                        .HasForeignKey("PersonHeatingId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "PersonWater")
                        .WithMany()
                        .HasForeignKey("PersonWaterId");

                    b.HasOne("CopyVisterma.Entities.ClientType", "Type")
                        .WithMany("Clients")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CopyVisterma.Entities.ClientTechnician", b =>
                {
                    b.HasOne("CopyVisterma.Entities.Client", "Client")
                        .WithMany("ClientsTechnicians")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CopyVisterma.Entities.ServiceTechnician", "ServiceTechnician")
                        .WithMany("ClientsTechnicians")
                        .HasForeignKey("ServiceTechnicianId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CopyVisterma.Entities.Employee", b =>
                {
                    b.HasOne("CopyVisterma.Entities.Client", "Client")
                        .WithMany("Employees")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
